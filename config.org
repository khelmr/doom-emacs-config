#+title: Doom Emacs Config
#+startup: fold

* Doom
** Init
#+begin_src elisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       (corfu +orderless
              +icons
              +childframe)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       (smooth-scroll +interpolate)     ; So smooth you won't believe it's not butter
       ;; tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces       ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       ;; (evil +everywhere); come to the dark side, we have cookies
       (meow +qwerty)
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons
              +dirvish)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;eww               ; the internet is gross
       ;;ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe)              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       (magit +icons
              +forge)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +tree-sitter
            +lsp)               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +noter
            +pretty)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader

       :config
       literate
       (default +bindings +smartparens))

#+end_src
** Config
#+begin_src emacs-lisp :tangle yes
;;; -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Kevin Rao"
      user-mail-address "kevinrao2000@gmail.com")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
** Package
#+begin_src emacs-lisp :tangle yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)
#+end_src
* Input
* Completion
* UI
** Modeline :builtin:
*** Show wordcount in modeline :appearance:
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
  (setq doom-modeline-enable-word-count t))
#+end_src
*** Show mode icon in modeline :appearance:
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t))
#+end_src
** Indent-guides
*** Make indent-guides straight lines
#+begin_src emacs-lisp :tangle yes
(after! indent-bars
  (setq indent-bars-pattern "."))
#+end_src
** Theme
#+begin_src emacs-lisp :tangle yes
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'catppuccin)

#+end_src
*** Modus
#+begin_src emacs-lisp :tangle packages.el
(package! modus-themes)
#+end_src
*** Catppuccin
#+begin_src emacs-lisp :tangle packages.el
(package! catppuccin-theme)
#+end_src
** Spacious Padding
#+begin_src emacs-lisp :tangle packages.el
(package! spacious-padding)
#+end_src
#+begin_src emacs-lisp :tangle yes
(use-package! spacious-padding
  :hook (doom-init-ui . spacious-padding-mode)
  :init
  (setq spacious-padding-subtle-mode-line t))
#+end_src
** Pulsar
#+begin_src emacs-lisp :tangle packages.el
(package! pulsar)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! pulsar
    :hook (doom-first-input . pulsar-global-mode))
#+end_src
* Editor
** Line Numbers
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src
** Buffer
#+begin_src emacs-lisp :tangle yes
(map! :leader (:prefix-map ("b" . "buffer")
       :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
       :desc "Previous buffer"             "["   #'previous-buffer
       :desc "Next buffer"                 "]"   #'next-buffer
       (:when (modulep! :ui workspaces)
        :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
        :desc "Switch buffer"           "B" #'switch-to-buffer
        :desc "ibuffer workspace"       "I" #'+ibuffer/open-for-current-workspace)
       (:unless (modulep! :ui workspaces)
        :desc "Switch buffer"           "b" #'switch-to-buffer)
       :desc "Clone buffer"                "c"   #'clone-indirect-buffer
       :desc "Clone buffer other window"   "C"   #'clone-indirect-buffer-other-window
       :desc "Kill buffer"                 "d"   #'kill-current-buffer
       :desc "ibuffer"                     "i"   #'ibuffer
       :desc "Kill buffer"                 "k"   #'kill-current-buffer
       :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
       (:when (modulep! :editor meow)
         :desc "Switch to last buffer"       "l"   #'meow-last-buffer)
       :desc "Set bookmark"                "m"   #'bookmark-set
       :desc "Delete bookmark"             "M"   #'bookmark-delete
       :desc "Next buffer"                 "n"   #'next-buffer
       ;; :desc "New empty buffer"            "N"   #'evil-buffer-new
       :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
       :desc "Previous buffer"             "p"   #'previous-buffer
       :desc "Revert buffer"               "r"   #'revert-buffer
       :desc "Rename buffer"               "R"   #'rename-buffer
       :desc "Save buffer"                 "s"   #'basic-save-buffer
       ;; :desc "Save all buffers"            "S"   #'evil-write-all
       :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
       :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
       :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
       :desc "Yank buffer"                 "y"   #'+default/yank-buffer-contents
       :desc "Bury buffer"                 "z"   #'bury-buffer
       :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers))
#+end_src
** Font
#+begin_src emacs-lisp :tangle yes
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "Maple Mono NF" :size 13)
     doom-variable-pitch-font (font-spec :family "Maple Mono NF" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src
** Files
#+begin_src emacs-lisp :tangle yes
(map! :leader (:prefix-map ("f" . "file")
      :desc "Save file"                   "s"   #'save-buffer
      :desc "Save file as..."             "S"   #'write-file))
#+end_src

** Meow
Set some defaults
#+begin_src emacs-lisp :tangle yes
(after! meow
  (setq meow-use-clipboard t
        meow-use-enhanced-selection-effect t)
  (after! consult
    (setq meow-goto-line-function 'consult-goto-line)))
#+end_src
*** Normal mode tweaks
#+begin_src emacs-lisp :tangle yes
(after! meow
  (meow-normal-define-key
 '("d" . meow-kill)
 '("g" . "M-g")
 '("s" . avy-goto-char-2)
 '("u" . undo-fu-only-undo)
 '("U" . undo-fu-only-redo)
 '("/" . meow-visit)
 '("?" . meow-query-replace-regexp)))
#+end_src
*** Leader keys
Add some keys from doom evil mode back into meow's leader keymap
#+begin_src emacs-lisp :tangle yes
(after! meow
  (meow-leader-define-key
   '("." . find-file)
   '("," . persp-switch-to-buffer)
   '("~" . +popup/toggle)
   '("<" . switch-to-buffer)
   '("'" . vertico-repeat)
   '("*" . +default/search-project-for-symbol-at-point)
   '("/" . +default/search-project)
   '("SPC" . projectile-find-file)
   '("RET" . bookmark-jump)
   '(";" . pp-eval-expression)
   '(":" . execute-extended-command)
   ;; (cons "TAB" persp-key-map)
   (cons "w" window-prefix-map)))
#+end_src

#+RESULTS:

*** Automatic =meow-insert= hooks
Automatically switch to =meow-insert= mode for convenience.
#+begin_src emacs-lisp :tangle yes
(after! org
    ;; Change to insert mode after certain org functions
    (add-hook 'org-insert-heading-hook 'meow-insert)
    ;; TODO check if src buffer is empty before switching to insert mode
    (add-hook 'org-src-mode-hook 'meow-insert)
    (add-hook 'org-capture-mode-hook 'meow-insert)
    (add-hook 'org-log-buffer-setup-hook 'meow-insert)
    (add-hook 'org-metareturn-hook 'meow-insert))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! git-commit
    (add-hook
     'git-commit-mode-hook
     (defun +meow--git-commit-insert-mode ()
       (when (bound-and-true-p meow-mode) (meow-insert-mode 1)))))
#+end_src
*** Meow Tree-sitter
Add tree-sitter support to meow.
#+begin_src emacs-lisp :tangle packages.el
(package! meow-tree-sitter)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! meow-tree-sitter
  :after (meow treesit)
  :init
  (meow-tree-sitter-register-defaults))
#+end_src
*** HACK Restore =helpful-describe-key=
Meow for some reason overrides the mapping of =helpful-describe-key=. This restores that functionality.
#+begin_src emacs-lisp :tangle yes
(after! meow
  (after! helpful
    (map! [remap meow-describe-key] #'helpful-key)))
#+end_src

** Casual
#+begin_src emacs-lisp :tangle packages.el
(package! casual-suite)
#+end_src

#+begin_src elisp
(use-package! casual-suite
  :bind
  (("M-g a" . #'casual-avy-tmenu))
  :config
  (setq casual-lib-use-unicode t))
#+end_src
** Which Key
*** Show =which-key= buffer sooner
#+begin_src emacs-lisp :tangle yes
(after! which-key
  (setq which-key-idle-delay 0.3))
#+end_src
** Windows
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("w" . "window")
       :desc "Undo window config"           "u" #'winner-undo
       :desc "Redo window config"           "U" #'winner-redo
       "d" #'delete-window
       "D" #'delete-other-windows
       "s" #'split-window-below
       "S" #'split-window-below
       "v" #'split-window-right
       "+" #'enlarge-window
       "=" #'balance-windows
       "-" #'shrink-window
       "+" #'enlarge-window
       "<" #'shrink-window-horizontally
       ">" #'enlarge-window-horizontally
       "h" #'windmove-left
       "j" #'windmove-down
       "k" #'windmove-up
       "l" #'windmove-right
       "H" #'windmove-swap-states-left
       "J" #'windmove-swap-states-down
       "K" #'windmove-swap-states-up
       "L" #'windmove-swap-states-right
       "o" #'other-window
       "n" #'next-window-any-frame
       "p" #'previous-window-any-frame))
#+end_src
*** Transpose Frame
#+begin_src emacs-lisp :tangle packages.el
(package! transpose-frame)
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("w" . "window")
        "t" #'transpose-frame
        "f" #'flip-frame
        "F" #'flop-frame
        "r" #'rotate-frame-clockwise
        "R" #'rotate-frame-anticlockwise))
#+end_src

** Workspace
#+begin_src emacs-lisp :tangle no
(package! tabspaces)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package tabspaces
  ;; use this next line only if you also use straight, otherwise ignore it.
  :hook (doom-init-ui . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup.
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :bind
  (:map tabspaces-mode-map
        ("C-c TAB TAB" . #'tabspaces-switch-or-create-workspace))
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  ;; (tabspaces-include-buffers '("*scratch*" "*dashboard*"))
  ;; (tabspaces-initialize-project-with-todo t)
  ;; (tabspaces-todo-file-name "project-todo.org")
  ;; sessions
  ;; (tabspaces-session t)
  ;; (tabspaces-session-auto-restore t)
  :config
  (with-eval-after-load 'consult
    ;; hide full buffer list (still available with "b" prefix)
    (consult-customize consult--source-buffer :hidden t :default nil)
    ;; set consult-workspace buffer list
    (defvar consult--source-workspace
      (list :name     "Workspace Buffers"
            :narrow   ?w
            :history  'buffer-name-history
            :category 'buffer
            :state    #'consult--buffer-state
            :default  t
            :items    (lambda () (consult--buffer-query
                                  :predicate #'tabspaces--local-buffer-p
                                  :sort 'visibility
                                  :as #'buffer-name)))

      "Set workspace buffer list for consult-buffer.")
    (add-to-list 'consult-buffer-sources 'consult--source-workspace))
  ;; Rename the first tab to `tabspaces-default-tab'
  ;; (tab-bar-rename-tab tabspaces-default-tab)
  )
#+end_src
#+begin_src emacs-lisp :tangle yes
(map! :leader (:when (modulep! :ui workspaces)
       (:prefix-map ("TAB" . "workspace")
        :desc "Display tab bar"           "TAB" #'+workspace/display
        :desc "Switch workspace"          "."   #'+workspace/switch-to
        :desc "Switch to last workspace"  "`"   #'+workspace/other
        :desc "New workspace"             "n"   #'+workspace/new
        :desc "New named workspace"       "N"   #'+workspace/new-named
        :desc "Load workspace from file"  "l"   #'+workspace/load
        :desc "Save workspace to file"    "s"   #'+workspace/save
        :desc "Kill session"              "x"   #'+workspace/kill-session
        :desc "Kill this workspace"       "d"   #'+workspace/kill
        :desc "Delete saved workspace"    "D"   #'+workspace/delete
        :desc "Rename workspace"          "r"   #'+workspace/rename
        :desc "Restore last session"      "R"   #'+workspace/restore-last-session
        :desc "Next workspace"            "]"   #'+workspace/switch-right
        :desc "Previous workspace"        "["   #'+workspace/switch-left
        :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
        :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
        :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
        :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
        :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
        :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
        :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
        :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
        :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
        :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final)))
#+end_src

* Emacs
* Term
* Checkers
* Tools
** Magit
*** Magit file icons
#+begin_src emacs-lisp :tangle yes
(after! magit
  (setq magit-format-file-function #'magit-format-file-nerd-icons))
#+end_src
* OS
* Languages
** Org
*** Editing
**** Return follows link
Pressing return follows the link
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-return-follows-link t))
#+end_src

*** Org directory
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/Org")
#+end_src
*** Agenda
**** Start week on Sunday
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-start-on-weekday 0))
#+end_src
*** Clock
**** Pomodoro
***** Appearance
****** Add clock icon to pomodoro timer
#+begin_src emacs-lisp :tangle yes
(after! org-pomodoro
  (setq org-pomodoro-format "ï€— %s"
        org-pomodoro-short-break-format "ï€— Short Break %s"
        org-pomodoro-long-break-format "ï€— Long Break %s"))
#+end_src
***** Prompt to start a new pomodoro after a break
Prompt the user to start a new pomodoro after taking a break. Taken from:
https://github.com/marcinkoziej/org-pomodoro/issues/89#issuecomment-1058725921

#+begin_src emacs-lisp :tangle yes
(after! org-pomodoro
  (defun my/org-pomodoro-restart ()
    (interactive)
    (let ((use-dialog-box nil))
      (when (y-or-n-p "Start a new pomodoro?")
        (save-window-excursion
          (org-clock-goto)
          (org-pomodoro)))))
  (add-hook 'org-pomodoro-break-finished-hook 'my/org-pomodoro-restart))
#+end_src
*** Appearance
*** Notes
**** Denote

#+begin_src emacs-lisp :tangle packages.el
(package! denote)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! denote
  :hook
  (dired-mode . denote-dired-mode)
  :custom
  (denote-directory "~/Documents/Org/Notes")
  (denote-backlinks-show-context t)
  (denote-date-prompt-use-org-read-date t)
  (denote-infer-keywords t)
  (denote-sort-keywords t)
  :bind
  (("C-c n d n" . denote-open-or-create)
   ("C-c n d c" . denote-region)
   ("C-c n d N" . denote-type)
   ("C-c n d d" . denote-date)
   ("C-c n d z" . denote-signature)
   ("C-c n d s" . denote-subdirectory)
   ("C-c n d t" . denote-template)
   ("C-c n d i" . denote-link-or-create)
   ("C-c n d I" . denote-add-links)
   ("C-c n d b" . denote-backlinks)
   ("C-c n d r" . denote-rename-file)
   ("C-c n d R" . denote-rename-file-using-front-matter))
  :config
  ;; hack
  ;; (setq denote-use-directory denote-directory)
  (after! 'org-capture
    (add-to-list 'org-capture-templates
                 '("n" "New note (with Denote)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))
  (denote-rename-buffer-mode 1))
#+end_src
***** Consult Denote
#+begin_src emacs-lisp :tangle packages.el
(package! consult-denote)
#+end_src
***** Denote Org
#+begin_src emacs-lisp :tangle packages.el
(package! denote-org)
#+end_src
*** Org Noter
#+begin_src emacs-lisp :tangle yes
;; HACK Prevents strange behavior interacting betwee org-noter and persp-mode that prevents the new frame from being closed. Avoid this by just preventing a new frame from being made in the first place.
(after! org-noter
  (setq org-noter-always-create-frame nil
        org-noter-kill-frame-at-session-end nil
        org-noter-auto-save-last-location nil))
#+end_src
* Email
* App
* Config


